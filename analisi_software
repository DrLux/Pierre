Problema

struct lake {

	- Funzioni Di Tansizione = Prende come parametro un puntatore ad un vettore ed uno stato, riempie il vettore con le azioni legali (che superano i test sui vincoli) e resituisce il numero di azioni possibili da quello stato

	- Azion1..2..3... = azione che, a partire da un determinato stato, ne genera uno successore

	- Stato Iniziale = Stato iniziale del problema

	- Goal Test = dato uno stato, verifica se questo sia l' obiettivo raggiunto

	- Constraint Test = dato uno stato, verifica se questo rispetta i vincoli

	- Print state = Dato uno stato ne stampa il contenuto 

	- Heuristic = Dato lo stato di un nodo figlio, ne calcola il costo da lui fino al goal

	- Print Solution = data una lista di stati ne stampa la soluzione

	- Step Coast = dato stato e costo cammino del padre, torna il del Path Cost del figlio
}


Nodo {
	struct Nodo {

	- Stato = puntatore alla struttura che continene lo stato attuale

	- Parent = Puntatore al nodo padre 

	- Azione = azione che ha generato questo nodo

	- Path_Cost = Costo del cammino da radice a nodo

	- Heuristic_Cost = Costo del cammino da nodo a goal

Funzione Nodo_Figlio(problema, Nodo, azione)
	Stato = azione(nodo.stato)
	Parent = NOde
	Azione = azione
	Path_Cost = step_cost(node)
	Heuristich_cost = problema.heuristic(state)
}

Funzione Soluzione(Node) = dato un nodo restituisce la lista di stati dalla root al goal

Clean node = dato un puntatore a nodo ne fa la free()	
}


https://github.com/BigNerd95/Algorithms_University
https://rosettacode.org/wiki/Priority_queue#C